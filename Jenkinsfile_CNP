#!groovy

@Library("Infrastructure")

def product = "cmc"
def component = "claim-store"

List<LinkedHashMap<String, Object>> secrets = [
  secret('claim-store-db-password', 'CLAIM_STORE_DB_PASSWORD'),
  secret('smoke-test-citizen-username', 'SMOKE_TEST_CITIZEN_USERNAME'),
  secret('smoke-test-solicitor-username', 'SMOKE_TEST_SOLICITOR_USERNAME'),
  secret('smoke-test-user-password', 'SMOKE_TEST_USER_PASSWORD'),
  secret('generated-user-email-pattern', 'GENERATED_USER_EMAIL_PATTERN'),
  secret('citizen-oauth-client-secret', 'OAUTH2_CLIENT_SECRET'),
  secret('citizen-oauth-client-secret', 'OAUTH_CLIENT_SECRET'),
  secret('claim-store-s2s-secret', 'CLAIM_STORE_S2S_SECRET'),
  secret('claim-store-s2s-secret', 'IDAM_S2S_AUTH_TOTP_SECRET'),
  secret('anonymous-caseworker-username', 'IDAM_CASEWORKER_ANONYMOUS_USERNAME'),
  secret('anonymous-caseworker-password', 'IDAM_CASEWORKER_ANONYMOUS_PASSWORD'),
  secret('system-update-username', 'IDAM_CASEWORKER_SYSTEM_USERNAME'),
  secret('system-update-password', 'IDAM_CASEWORKER_SYSTEM_PASSWORD'),
  secret('notify-api-key', 'NOTIFY_API_KEY'),
  secret('staff-email', 'STAFF_EMAIL'),
  secret('AppInsightsInstrumentationKey', 'APPINSIGHTS_INSTRUMENTATIONKEY'),
  secret('postcode-lookup-api-key', 'POSTCODE_LOOKUP_API_KEY'),
  secret('cmc-s2s-secret', 'IDAM_S2S_TOTP_SECRET'),
  secret('citizen-draft-store-primary', 'DRAFT_STORE_SECRET_PRIMARY'),
  secret('citizen-draft-store-secondary', 'DRAFT_STORE_SECRET_SECONDARY'),
  secret('citizen-cookie-encryption-key', 'COOKIE_ENCRYPTION_KEY'),
  secret('staff-email', 'CONTACT_EMAIL')
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   version    : '',
   envVariable: envVar
  ]
}

// Vars needed for AKS testing
env.FRONTEND_BASE_URL = 'https://moneyclaims.aat.platform.hmcts.net'
env.IDAM_API_URL = 'https://preprod-idamapi.reform.hmcts.net:3511'
env.S2S_URL = 'http://rpe-service-auth-provider-aat.service.core-compute-aat.internal'

String notificationsChannel = '#cmc-tech-notification'

withPipeline("java", product, component) {
  after('checkout') {
    onMaster {
      withCredentials([usernamePassword(credentialsId: 'jenkins-github-hmcts-api-token', passwordVariable: 'BEARER_TOKEN', usernameVariable: 'USERNAME')]) {
        try {
          def url = sh(returnStdout: true, script: 'git config remote.origin.url').replace('github.com', '${BEARER_TOKEN}@github.com')
          sh('git remote set-url origin ' + url)
          sh('git fetch origin demo:demo')
          sh('git push --force origin HEAD:demo')
        } catch (err) {
          notifyBuildEvent channel: notificationsChannel, color: 'warning', message: 'Failed to update demo branch'
        }
      }
    }
  }

  loadVaultSecrets(secrets)
  enableSlackNotifications(notificationsChannel)
  enableDockerBuild()
  installCharts()
  setVaultName('cmc')
}
