#!groovy

@Library("Infrastructure")

def product = "cmc"
def component = "claim-store"
def branchesToSync = ['demo', 'perftest', 'ithc']


def secrets = [
  // these are required for our integration tests container (initialised in Jenkins)
  'cmc-${env}': [
    secret('citizen-oauth-client-secret', 'OAUTH2_CLIENT_SECRET'),
    secret('smoke-test-citizen-username', 'SMOKE_TEST_CITIZEN_USERNAME'),
    secret('smoke-test-solicitor-username', 'SMOKE_TEST_SOLICITOR_USERNAME'),
    secret('smoke-test-user-password', 'SMOKE_TEST_USER_PASSWORD'),
    secret('generated-user-email-pattern', 'GENERATED_USER_EMAIL_PATTERN')
  ],
  // below is just for CCD in AKS - to be cleaned up when CCD Helm chart is updated to use flexvolume for secrets
  'ccd-${env}': [
    secret('ccd-data-s2s-secret', 'DATA_STORE_S2S_KEY'),
    secret('ccd-definition-s2s-secret', 'DEFINITION_STORE_S2S_KEY'),
    secret('ccd-admin-web-oauth2-client-secret', 'ADMIN_WEB_IDAM_SECRET'),
    secret('idam-data-store-client-secret','IDAM_OAUTH2_DATA_STORE_CLIENT_SECRET'),
    secret('idam-data-store-system-user-username','IDAM_DATA_STORE_SYSTEM_USER_USERNAME'),
    secret('idam-data-store-system-user-password','IDAM_DATA_STORE_SYSTEM_USER_PASSWORD'),
    secret('ccd-importer-username','IMPORTER_USERNAME'),
    secret('ccd-importer-password','IMPORTER_PASSWORD')
  ],
  'aac-${env}': [
    secret('idam-mca-client-secret', 'IDAM_MCA_CLIENT_SECRET'),
    secret('idam-mca-system-user-username', 'IDAM_CAA_USERNAME'),
    secret('idam-mca-system-user-password', 'IDAM_CAA_PASSWORD'),
    secret('idam-noc-approver-username', 'IDAM_NOC_APPROVER_USERNAME'),
    secret('idam-noc-approver-password', 'IDAM_NOC_APPROVER_PASSWORD'),
    secret('aac-manage-case-s2s-secret', 'MANAGE_CASE_S2S_KEY'),
    secret('notify-mca-api-key-secret', 'NOTIFY_MCA_API_KEY')
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [$class     : 'AzureKeyVaultSecret',
   secretType : 'Secret',
   name       : secretName,
   version    : '',
   envVariable: envVar
  ]
}

// Vars needed for AKS testing
env.FRONTEND_BASE_URL = 'https://moneyclaims.aat.platform.hmcts.net'
env.IDAM_API_URL = 'https://idam-api.aat.platform.hmcts.net'
env.IDAM_WEB_URL = 'https://idam-web-public.aat.platform.hmcts.net'
env.S2S_URL = 'http://rpe-service-auth-provider-aat.service.core-compute-aat.internal'
env.PDF_SERVICE_URL = 'http://cmc-pdf-service-aat.service.core-compute-aat.internal'

String notificationsChannel = '#cmc-tech-notification'

withPipeline("java", product, component) {
  enableSlackNotifications(notificationsChannel)
  enableAksStagingDeployment()
  disableLegacyDeployment()
  syncBranchesWithMaster(branchesToSync)

  onMaster {
    loadVaultSecrets(secrets)
  }

  onPR {
    env.ENVIRONMENT = "preview"
    env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
    loadVaultSecrets(secrets)
  }

}
