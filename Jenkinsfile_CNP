#!groovy

@Library("Infrastructure")

def product = "cmc"
def component = "claim-store"

List<LinkedHashMap<String, Object>> secrets = [
  secret('smoke-test-citizen-username', 'SMOKE_TEST_CITIZEN_USERNAME'),
  secret('smoke-test-solicitor-username', 'SMOKE_TEST_SOLICITOR_USERNAME'),
  secret('smoke-test-user-password', 'SMOKE_TEST_USER_PASSWORD'),
  secret('generated-user-email-pattern', 'GENERATED_USER_EMAIL_PATTERN'),
  secret('citizen-oauth-client-secret', 'OAUTH2_CLIENT_SECRET'),
  secret('claim-store-s2s-secret', 'CLAIM_STORE_S2S_SECRET'),
  secret('anonymous-caseworker-username', 'ANONYMOUS_CASEWORKER_USERNAME'),
  secret('anonymous-caseworker-password', 'ANONYMOUS_CASEWORKER_PASSWORD'),
  secret('system-update-username', 'SYSTEM_UPDATE_USERNAME'),
  secret('system-update-password', 'SYSTEM_UPDATE_PASSWORD'),
  secret('notify-api-key', 'NOTIFY_API_KEY'),
  secret('staff-email', 'STAFF_EMAIL'),
  secret('AppInsightsInstrumentationKey', 'APPINSIGHTS_INSTRUMENTATIONKEY'),
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

// Vars needed for AKS testing
env.FRONTEND_BASE_URL = 'https://moneyclaims.aat.platform.hmcts.net'
env.IDAM_API_URL = 'https://preprod-idamapi.reform.hmcts.net:3511'
env.S2S_URL = 'http://rpe-service-auth-provider-aat.service.core-compute-aat.internal'

String notificationsChannel = '#cmc-tech-notification'

withPipeline("java", product, component) {
  afterCheckout {
    onMaster {
      try {
       sh """
          git fetch origin demo:demo
          git push --force origin HEAD:demo
        """
      } catch (err) {
        notifyBuildEvent channel: notificationsChannel, color: 'warning', message: 'Failed to update demo branch'
      }
    }
  }

  env.CLAIM_STORE_DB_PORT = '5432'
  env.CLAIM_STORE_DB_NAME = 'claimstore'
  env.CLAIM_STORE_DB_USERNAME = 'claimstore'

  loadVaultSecrets(secrets)
  enableSlackNotifications(notificationsChannel)
  enableDockerBuild()
  installCharts()
  setVaultName('cmc')
}
