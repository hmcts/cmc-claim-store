import java.util.stream.Collectors

plugins {
  id 'checkstyle'
  id 'io.spring.dependency-management' version '1.1.0'
  id 'org.springframework.boot' version '2.7.11'
  id 'org.owasp.dependencycheck' version '8.0.1'
  id 'org.sonarqube' version '2.8'
  id 'com.github.ben-manes.versions' version '0.36.0'
  id 'jacoco'
  id 'idea'
}

dependencyUpdates.resolutionStrategy = {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}

def springBootVersion = plugins.getPlugin('org.springframework.boot').class.package.implementationVersion
def springCloudVersion = '2021.0.3'

def versions = [
  logback           : '1.2.10',
  springBoot        : springBootVersion,
  reformJavaLogging : '5.1.7',
  loggingAppinsights : '5.1.7',
  restAssuredVersion: '4.2.0',
  jackson           : '2.14.2',
  junit             : '5.7.1',
  junitPlatform     : '1.7.1',
]

allprojects {
  apply plugin: 'java'
  apply plugin: 'checkstyle'
  apply plugin: 'io.spring.dependency-management'
  apply plugin: 'org.owasp.dependencycheck'
  apply plugin: 'com.github.ben-manes.versions'

  group 'uk.gov.hmcts.cmc'
  version '1.1.0'

  java {
    toolchain {
      languageVersion = JavaLanguageVersion.of(17)
    }
  }

  // https://github.com/gradle/gradle/issues/16791
  tasks.withType(JavaExec).configureEach {
    javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
  }

  jacoco {
    toolVersion = '0.8.8' // jacocoMavenPluginVersion
    reportsDirectory = file("$buildDir/reports/jacoco")
  }

  tasks.withType(Copy).all {
    duplicatesStrategy 'include'
  }

  checkstyle {
    maxWarnings = 0
    toolVersion = '8.29'
    getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
  }

  // https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
  dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'false' ? 11 : 0
    suppressionFile = 'config/owasp/suppressions.xml'
    analyzers {
      // Disable scanning of .NET related binaries
      assemblyEnabled = false
    }
  }

  compileJava {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation'
  }

  compileTestJava {
    options.compilerArgs << '-Xlint:deprecation'
  }

  repositories {
    mavenLocal()
    mavenCentral()
    maven {
      url 'https://jitpack.io'
    }
    jcenter()
  }

  dependencyManagement {
    imports {
      mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
      mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
    dependencies {
      // CVE-2020-13935
      dependencySet(group: 'org.apache.tomcat.embed', version: '9.0.69') {
        entry 'tomcat-embed-core'
        entry 'tomcat-embed-el'
        entry 'tomcat-embed-websocket'
      }
      // checkstyle needs a certain version and so does spring fox swagger, so can't use latest
      // fun times...
      dependencySet(group: 'com.google.guava', version: '30.1.1-jre') {
        entry 'guava'
      }
      // solves CVE-2019-12086
      // remove once spring manager incorporates this changes
      dependencySet(
        group: 'com.fasterxml.jackson.core',
        version: versions.jackson
      ) {
        entry 'jackson-core'
      }
      dependencySet(
        group: 'com.fasterxml.jackson.core',
        version: versions.jackson
      ) {
        entry 'jackson-databind'
      }
      dependencySet(
        group: 'com.fasterxml.jackson.datatype',
        version: versions.jackson
      ) {
        entry 'jackson-datatype-jdk8'
        entry 'jackson-datatype-jsr310'
      }
      dependencySet(
        group: 'com.fasterxml.jackson.module',
        version: versions.jackson
      ) {
        entry 'jackson-module-parameter-names'
      }
      dependencySet(
        group: 'com.fasterxml.jackson.core',
        version: versions.jackson
      ) {
        entry 'jackson-annotations'
      }
      // solves CVE-2019-13990
      dependencySet(
        group: 'org.quartz-scheduler',
        version: '2.3.2'
      ) {
        entry 'quartz'
      }
      // solves CVE-2022-25857
      dependencySet(
        group: 'org.yaml',
        version: '1.33'
      ) {
        entry 'snakeyaml'
      }
      dependencySet(group: 'ch.qos.logback', version: '1.2.10') {
        entry 'logback-core'
        entry 'logback-classic'
      }
      // solves CVE-2019-14900
      dependency 'org.hibernate:hibernate-validator:6.2.4.Final'

      // solves CVE-2020-25638
      dependencySet(
        group: 'org.hibernate',
        version: '5.4.24.Final'
      ) {
        entry 'hibernate-core'
      }
      dependencySet(
        group: 'org.hibernate',
        version: '6.2.4.Final'
      ) {
        entry 'hibernate-validator'
      }
      dependencySet(group: 'org.apache.logging.log4j', version: '2.18.0') {
        entry 'log4j-api'
        entry 'log4j-to-slf4j'
      }
    }
  }
}

configurations {
  aatImplementation.extendsFrom(testImplementation)
  aatRuntime.extendsFrom(testRuntime)
  integrationTestImplementation.extendsFrom(testCompile)
  integrationTestRuntime.extendsFrom(testRuntime)
}

dependencies {

  implementation project(':email-client')
  implementation project(':domain-model')
  implementation project(':ccd-adapter')
  implementation project(':ccd-sample-data')
  implementation project(':rpa-mapper')
  implementation project(':domain-sample-data')
  implementation project(':job-scheduler')
  implementation project(':launch-darkly-client')

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-quartz'

  implementation group: 'org.flywaydb', name: 'flyway-core', version: '5.2.4'

  implementation group: 'ch.qos.logback', name: 'logback-classic', version: versions.logback
  implementation group: 'ch.qos.logback', name: 'logback-core', version: versions.logback

  implementation group: 'com.mitchellbosecke', name: 'pebble', version: '2.4.0'

  implementation group: 'commons-io', name: 'commons-io', version: '2.11.0'

  implementation group: 'org.springdoc', name: 'springdoc-openapi-ui', version: '1.6.15'

  implementation group: 'org.elasticsearch', name: 'elasticsearch', version: '7.13.4'
  implementation group: 'org.postgresql', name: 'postgresql', version: '42.3.7'

  implementation group: 'uk.gov.service.notify', name: 'notifications-java-client', version: '3.17.2-RELEASE'

  implementation group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.reformJavaLogging
  implementation group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.loggingAppinsights
  implementation group: 'com.microsoft.azure', name: 'applicationinsights-web', version: '2.6.4'

  implementation group: 'com.github.hmcts', name: 'cmc-pdf-service-client', version: '7.0.0'
  implementation group: 'uk.gov.hmcts.reform', name: 'document-management-client', version: '7.0.0'
  implementation group: 'com.launchdarkly', name: 'launchdarkly-java-server-sdk', version: '6.1.0'
  implementation group: 'uk.gov.hmcts.reform', name: 'core-case-data-store-client', version: '4.7.6'
  implementation group: 'com.github.hmcts', name: 'ccd-case-document-am-client', version: '1.7.1'
  implementation group: 'com.github.hmcts', name: 'doc-assembly-client', version: '1.2.2'
  implementation group: 'com.github.hmcts', name: 'payments-java-client', version: '0.0.7'
  implementation group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: '4.0.0'
  implementation group: 'com.github.hmcts', name: 'send-letter-client', version: '3.0.16'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: versions.springBoot
  implementation group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version: '0.1.0'

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-cache'
  implementation group: 'com.github.ben-manes.caffeine', name: 'caffeine', version: '2.7.0'

  implementation group: 'org.springframework.security', name: 'spring-security-web'
  implementation group: 'org.springframework.security', name: 'spring-security-config'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-client'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-oauth2-resource-server'
  implementation group: 'com.nimbusds', name: 'nimbus-jose-jwt', version: '9.25'
  implementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'

  implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'
  implementation group: 'org.apache.commons', name: 'commons-csv', version: '1.8'

  implementation group: 'org.jdbi', name: 'jdbi', version: '2.78'

  implementation group: 'org.springframework', name: 'spring-context-support'
  implementation group: 'org.springframework.retry', name: 'spring-retry'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign'

  implementation group: 'io.github.openfeign', name: 'feign-httpclient', version: '11.2'

  implementation group: 'org.springframework.cloud',name : 'spring-cloud-starter-bootstrap'

  implementation group: 'javax.json', name: 'javax.json-api', version: '1.1.4'
  implementation group: 'javax.inject', name: 'javax.inject', version: '1'

  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.26'
  compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.26'

  testImplementation project(':domain-sample-data')
  testImplementation project(path: ":ccd-adapter", configuration: 'testArtifacts')
  testImplementation group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssuredVersion
  testImplementation group: 'io.rest-assured', name: 'json-path', version: versions.restAssuredVersion
  testImplementation group: 'io.rest-assured', name: 'rest-assured-common', version: versions.restAssuredVersion
  testImplementation group: 'io.rest-assured', name: 'xml-path', version: versions.restAssuredVersion

  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  testImplementation group: 'org.springframework.cloud', name: 'spring-cloud-contract-wiremock'

  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit
  testImplementation group: 'org.junit.vintage', name: 'junit-vintage-engine', version: versions.junit
  testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: versions.junit
  testImplementation group: 'org.junit.platform', name: 'junit-platform-commons', version: versions.junitPlatform
  testImplementation group: 'org.junit.platform', name: 'junit-platform-engine', version: versions.junitPlatform
  testImplementation group: 'org.assertj', name: 'assertj-core', version: '3.20.2'
  testImplementation group: 'org.mockito', name: 'mockito-core', version: '3.11.2'
  testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '3.8.0'
  testImplementation group: 'org.powermock', name: 'powermock-api-mockito2', version: '2.0.2'
  testImplementation group: 'org.testcontainers', name: 'postgresql', version: '1.18.0'

  testImplementation group: 'org.pdfbox', name: 'com.springsource.org.pdfbox', version: '0.7.3'
  testImplementation group: 'com.jayway.jsonpath', name: 'json-path-assert', version: '2.5.0'
  testImplementation group: 'net.jodah', name: 'failsafe', version: '2.4.0'
  testImplementation group: 'org.xmlunit', name: 'xmlunit-core', version: '2.8.2'
  testImplementation group: 'org.xmlunit', name: 'xmlunit-matchers', version: '2.8.2'
  testImplementation 'com.github.hmcts:fortify-client:1.2.1:all'

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath
}

sourceSets {
  integrationTest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir('src/integrationTest/java')
    }
    resources {
      srcDir('src/integrationTest/resources')
    }
  }

  aat {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir('src/aat/java')
    }
    resources {
      srcDir('src/aat/resources')
    }
  }
}

dependencies {
  testImplementation project(path: ':domain-model')
  implementation 'org.projectlombok:lombok:1.18.20'
  integrationTestImplementation(sourceSets.test.output)
  integrationTestImplementation(sourceSets.main.output)
  integrationTestImplementation project(':email-client')
  integrationTestImplementation project(':domain-model')
}

test {
  useJUnitPlatform()
}

task fortifyScan(type: JavaExec)  {
  mainClass.set("uk.gov.hmcts.fortifyclient.FortifyClientMainApp")
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

task apiTest(type: Test) {
  group = 'verification'
  description = 'Runs the api tests'
  setTestClassesDirs(sourceSets.integrationTest.output.classesDirs)
  setClasspath(sourceSets.integrationTest.runtimeClasspath)
}

task migrateClaims() {
  description 'Migrating claims from claim-store database to CCD'

  doLast {
    javaexec {
      main = "-jar"
      args = [
        "ccd-claim-migration/build/libs/ccd-claim-migration-1.1.0.jar"
      ]
    }

    print 'Done'
  }
}

task functional(type: Test) {
  group = 'Delivery pipeline'
  description = 'Executes functional tests against an AAT Claim Store instance'
  setTestClassesDirs(sourceSets.aat.output.classesDirs)
  setClasspath(sourceSets.aat.runtimeClasspath)
  include "uk/gov/hmcts/cmc/claimstore/tests/functional/**"
  testLogging.showStandardStreams = true

  environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

task smoke(type: Test) {
  group = 'Delivery pipeline'
  description = 'Executes non-destructive smoke tests against a running Claim Store instance'
  setTestClassesDirs(sourceSets.aat.output.classesDirs)
  setClasspath(sourceSets.aat.runtimeClasspath)
  testLogging.showStandardStreams = true
  include "uk/gov/hmcts/cmc/claimstore/tests/smoke/**"

  environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

compileIntegrationTestJava {
  options.compilerArgs << '-Xlint:deprecation'
}

jacocoTestReport {
  executionData(test, apiTest)
  reports {
    xml.required = true
    csv.required = false
    xml.outputLocation = file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport
check.dependsOn apiTest
checkstyleMain.shouldRunAfter(compileJava)
test.shouldRunAfter(checkstyleMain, checkstyleAat, checkstyleTest, checkstyleIntegrationTest)
apiTest.shouldRunAfter(test, checkstyleMain, checkstyleAat, checkstyleTest, checkstyleIntegrationTest)

def listFiles(String pattern) {
  return new FileNameFinder()
    .getFileNames("${project.rootDir}", pattern)
    .stream()
    .collect(Collectors.joining(","))
}

sonarqube {
  properties {
    property "sonar.projectName", "CMC :: Claim Store"
    property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    property "sonar.exclusions", [
        "**/ccd/domain/**",
        "**/cmc/domain/models/**",
        "**/cmc/domain/amount/**",
        "**/cmc/ccd/sample/data/**",
        "**/cmc/ccd/mapper/**",
        "**/cmc/claimstore/services/courtfinder/**",
        "**/cmc/claimstore/idam/models/**",
        "**/cmc/claimstore/idam/IdamApi.java",
        "**/ExceptionForClient.java",
        "**/config/**",
        "**/*Exception.java",
        "**/*Event.java",
        "**/PathPatterns.java",
        "**/ClaimRepository.java",
        "**/CCDCaseRepository.java",
        "**/cmc/claimstore/appinsights/**",
        "**/cmc/claimstore/constants/**",
        "**/cmc/claimstore/models/**",
        "**/cmc/claimstore/services/ccd/legaladvisor/**",
        "**/cmc/claimstore/services/ccd/callbacks/ioc/FeesAndPaymentsConfiguration.java",
        "**/cmc/claimstore/services/ccd/callbacks/HWFMiscellaneousCallbackHandler.java",
        "**/cmc/claimstore/services/ccd/callbacks/HWFFullAndPartRemissionCallbackHandler.java",
        "**/cmc/claimstore/courtfinder/models/**",
        "**/ccd/migration/**",
        "**/EmailData.java",
        "**/CCDCaseHandler.java",
        "**/CCDReDetermination.java",
        "**/CCDEventProducer.java",
        "**/GeneratedDocuments.java",
        "**/DBCaseRepository.java",
        "**/MapperUtil.java",
        "**/CCDCaseApi.java",
        "launch-darkly-client/**",
        "email-client/**",
        "rpa-mapper/**",
        "**/fees/client/**",
        "**/UserRoleConstraintValidator.java",
        "**/ValidEmploymentConstraintValidator.java",
        "**/ValidInterestConstraintValidator.java",
        "**/ValidInterestDateConstraintValidator.java",
        "**/ValidUnemploymentConstraintValidator.java",
        "**/ValidIncomeConstraintValidator.java",
        "**/ValidExpenseConstraintValidator.java",
        "**/ValidResidenceConstraintValidator.java",
        "**/PaperResponseFullDefenceCallbackHandler.java",
        "**/cmc/claimstore/services/ccd/callbacks/roboticssupport/RoboticsNotificationServiceImpl.java"
    ].join(",")
  }
}

bootJar {
  archiveFileName.set('claim-store.jar')
  manifest {
    attributes 'Implementation-Title': project.name,
      'Implementation-Version': project.version
  }
}

task printVersion {
  description 'Prints the version of this project'
  doLast {
    print project.version
  }
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}

bootRun {
  def debug = System.getProperty("debug")
  if (debug == 'true') {
    jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005']
  }
}

task checkStyle(dependsOn: [checkstyleMain, checkstyleAat, checkstyleTest, checkstyleIntegrationTest]){}

idea {
  module {
    testSourceDirs += project.sourceSets.integrationTest.java.srcDirs
    testSourceDirs += project.sourceSets.integrationTest.resources.srcDirs
    testSourceDirs += project.sourceSets.aat.java.srcDirs
    testSourceDirs += project.sourceSets.aat.resources.srcDirs
  }
}
