import java.util.stream.Collectors

plugins {
  id 'checkstyle'
  id 'io.spring.dependency-management' version '1.0.9.RELEASE'
  id 'org.springframework.boot' version '2.3.0.RELEASE'
  id 'org.owasp.dependencycheck' version '5.3.1'
  id 'org.sonarqube' version '2.8'
  id 'com.github.ben-manes.versions' version '0.28.0'
  id 'jacoco'
  id 'net.ltgt.apt' version '0.21'
  id 'idea'
}

dependencyUpdates.resolutionStrategy = {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}

def springBootVersion = '2.2.6.RELEASE'
def springCloudVersion = 'Hoxton.SR2'

def versions = [
  logback           : '1.2.3',
  springBoot        : springBootVersion,
  springfoxSwagger  : '2.9.2',
  reformJavaLogging : '5.1.1',
  restAssuredVersion: '4.2.0',
  jackson           : '2.10.0',
  junit             : '5.5.2',
  junitPlatform     : '1.5.2',
]

allprojects {
  apply plugin: 'java'
  apply plugin: 'checkstyle'
  apply plugin: 'io.spring.dependency-management'
  apply plugin: 'org.owasp.dependencycheck'
  apply plugin: 'com.github.ben-manes.versions'

  group 'uk.gov.hmcts.cmc'
  version '1.1.0'

  jacoco {
    toolVersion = '0.8.5' // jacocoMavenPluginVersion
    reportsDir = file("$buildDir/reports/jacoco")
  }

  checkstyle {
    maxWarnings = 0

    toolVersion = '8.29'
    // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
    configDir = new File(rootDir, 'config/checkstyle')
  }

  // https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
  dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'false' ? 11 : 0
    suppressionFile = 'dependency-check-suppressions.xml'
    analyzers {
      // Disable scanning of .NET related binaries
      assemblyEnabled = false
    }
  }

  sourceCompatibility = 11
  compileJava {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation'
  }

  compileTestJava {
    options.compilerArgs << '-Xlint:deprecation'
  }

  repositories {
    mavenLocal()
    mavenCentral()
    maven {
      url "https://dl.bintray.com/hmcts/hmcts-maven"
    }
    maven {
      url 'https://repo.spring.io/libs-milestone'
    }
    jcenter()
  }

  dependencyManagement {
    imports {
      mavenBom "org.springframework.boot:spring-boot-dependencies:${springBootVersion}"
      mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
    dependencies {
      // CVE-2020-11996
      dependencySet(group: 'org.apache.tomcat.embed', version: '9.0.36') {
        entry 'tomcat-embed-core'
        entry 'tomcat-embed-el'
        entry 'tomcat-embed-websocket'
      }
      // checkstyle needs a certain version and so does spring fox swagger, so can't use latest
      // fun times...
      dependencySet(group: 'com.google.guava', version: '20.0') {
        entry 'guava'
      }
      // solves CVE-2019-12086
      // remove once spring manager incorporates this changes
      dependencySet(
        group: 'com.fasterxml.jackson.core',
        version: versions.jackson
      ) {
        entry 'jackson-core'
      }
      dependencySet(
        group: 'com.fasterxml.jackson.core',
        version: versions.jackson
      ) {
        entry 'jackson-databind'
      }
      dependencySet(
        group: 'com.fasterxml.jackson.datatype',
        version: versions.jackson
      ) {
        entry 'jackson-datatype-jdk8'
        entry 'jackson-datatype-jsr310'
      }
      dependencySet(
        group: 'com.fasterxml.jackson.module',
        version: versions.jackson
      ) {
        entry 'jackson-module-parameter-names'
      }
      // solves CVE-2019-13990
      dependencySet(
        group: 'org.quartz-scheduler',
        version: '2.3.2'
      ) {
        entry 'quartz'
      }
      // solves CVE-2020-5407
      dependencySet(
        group: 'org.springframework.security',
        version: '5.3.2.RELEASE'
      ) {
        entry 'spring-security-crypto'
      }
    }
  }
}

configurations {
  aatCompile.extendsFrom(testCompile)
  aatRuntime.extendsFrom(testRuntime)
  integrationTestCompile.extendsFrom(testCompile)
  integrationTestRuntime.extendsFrom(testRuntime)
}

dependencies {

  compile project(':email-client')
  compile project(':domain-model')
  compile project(':ccd-adapter')
  compile project(':rpa-mapper')
  compile project(':domain-sample-data')
  compile project(':job-scheduler')
  compile project(':launch-darkly-client')

  compile group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-validation'

  compile group: 'org.flywaydb', name: 'flyway-core', version: '5.2.4'

  compile group: 'ch.qos.logback', name: 'logback-classic', version: versions.logback
  compile group: 'ch.qos.logback', name: 'logback-core', version: versions.logback

  compile group: 'com.mitchellbosecke', name: 'pebble', version: '2.4.0'

  compile group: 'commons-io', name: 'commons-io', version: '2.7'

  compile group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
  compile group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger

  compile group: 'org.elasticsearch', name: 'elasticsearch', version: '7.7.0'
  compile group: 'org.postgresql', name: 'postgresql', version: '42.2.14'

  compile group: 'uk.gov.service.notify', name: 'notifications-java-client', version: '3.15.1-RELEASE'

  compile group: 'uk.gov.hmcts.reform', name: 'logging', version: versions.reformJavaLogging
  compile group: 'uk.gov.hmcts.reform', name: 'logging-appinsights', version: versions.reformJavaLogging
  compile group: 'uk.gov.hmcts.reform', name: 'pdf-service-client', version: '7.0.0'
  compile group: 'uk.gov.hmcts.reform', name: 'document-management-client', version: '6.0.0'
  compile group: 'uk.gov.hmcts.reform', name: 'core-case-data-store-client', version: '4.7.0'
  compile group: 'uk.gov.hmcts.reform', name: 'doc-assembly-client', version: '1.0.4'
  compile group: 'uk.gov.hmcts.reform', name: 'fees-java-client', version: '0.0.6'
  compile group: 'uk.gov.hmcts.reform', name: 'payments-client', version: '0.0.6'
  compile group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: '3.1.1'
  compile group: 'uk.gov.hmcts.reform', name: 'send-letter-client', version: '2.3.0'
  compile group: 'uk.gov.hmcts.reform', name: 'health-spring-boot-starter', version: '0.0.5'
  compile group: 'uk.gov.hmcts.reform', name: 'properties-volume-spring-boot-starter', version: '0.0.4'

  compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.10'
  compile group: 'org.apache.commons', name: 'commons-csv', version: '1.8'

  compile group: 'org.jdbi', name: 'jdbi', version: '2.78'

  compile group: 'org.springframework', name: 'spring-context-support'
  compile group: 'org.springframework.retry', name: 'spring-retry'
  compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign'

  compile group: 'io.github.openfeign', name: 'feign-httpclient', version: '11.0'

  annotationProcessor group: 'org.projectlombok', name: 'lombok', version: '1.18.12'
  compileOnly group: 'org.projectlombok', name: 'lombok', version: '1.18.10'

  testCompile project(':domain-sample-data')
  testCompile project(path: ":ccd-adapter", configuration: 'testArtifacts')
  testCompile group: 'io.rest-assured', name: 'rest-assured', version: versions.restAssuredVersion
  testCompile group: 'io.rest-assured', name: 'json-path', version: versions.restAssuredVersion
  testCompile group: 'io.rest-assured', name: 'rest-assured-common', version: versions.restAssuredVersion
  testCompile group: 'io.rest-assured', name: 'xml-path', version: versions.restAssuredVersion

  testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  testCompile group: 'org.springframework.cloud', name: 'spring-cloud-contract-wiremock'

  testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: versions.junit
  testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: versions.junit
  testCompile group: 'org.junit.vintage', name: 'junit-vintage-engine', version: versions.junit
  testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: versions.junit
  testCompile group: 'org.junit.platform', name: 'junit-platform-commons', version: versions.junitPlatform
  testCompile group: 'org.junit.platform', name: 'junit-platform-engine', version: versions.junitPlatform
  testCompile group: 'org.assertj', name: 'assertj-core', version: '3.16.1'
  testCompile group: 'org.mockito', name: 'mockito-core', version: '3.3.3'
  testCompile group: 'org.mockito', name: 'mockito-junit-jupiter', version: '3.3.3'
  testCompile group: 'org.testcontainers', name: 'postgresql', version: '1.13.0'

  testCompile group: 'org.pdfbox', name: 'com.springsource.org.pdfbox', version: '0.7.3'
  testCompile group: 'com.jayway.jsonpath', name: 'json-path-assert', version: '2.4.0'
  testCompile group: 'net.jodah', name: 'failsafe', version: '2.4.0'
  testCompile group: 'org.xmlunit', name: 'xmlunit-core', version: '2.7.0'
  testCompile group: 'org.xmlunit', name: 'xmlunit-matchers', version: '2.6.3'
}

sourceSets {
  integrationTest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir('src/integrationTest/java')
    }
    resources {
      srcDir('src/integrationTest/resources')
    }
  }

  aat {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
      srcDir('src/aat/java')
    }
    resources {
      srcDir('src/aat/resources')
    }
  }
}

dependencies {
  integrationTestCompile(sourceSets.test.output)
  integrationTestCompile(project(':email-client').sourceSets.main.output)
}

test {
  useJUnitPlatform()
}

task apiTest(type: Test) {
  group = 'verification'
  description = 'Runs the api tests'
  setTestClassesDirs(sourceSets.integrationTest.output.classesDirs)
  setClasspath(sourceSets.integrationTest.runtimeClasspath)
}

task migrateClaims() {
  description 'Migrating claims from claim-store database to CCD'

  doLast {
    javaexec {
      main = "-jar";
      args = [
        "ccd-claim-migration/build/libs/ccd-claim-migration-1.1.0.jar"
      ]
    }

    print 'Done'
  }
}

task functional(type: Test) {
  group = 'Delivery pipeline'
  description = 'Executes functional tests against an AAT Claim Store instance'
  setTestClassesDirs(sourceSets.aat.output.classesDirs)
  setClasspath(sourceSets.aat.runtimeClasspath)
  include "uk/gov/hmcts/cmc/claimstore/tests/functional/**"

  environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

task smoke(type: Test) {
  group = 'Delivery pipeline'
  description = 'Executes non-destructive smoke tests against a running Claim Store instance'
  setTestClassesDirs(sourceSets.aat.output.classesDirs)
  setClasspath(sourceSets.aat.runtimeClasspath)
  include "uk/gov/hmcts/cmc/claimstore/tests/smoke/**"

  environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

compileIntegrationTestJava {
  options.compilerArgs << '-Xlint:deprecation'
}

jacocoTestReport {
  executionData(test, apiTest)
  reports {
    xml.enabled = true
    csv.enabled = false
    xml.destination = file("${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport
check.dependsOn apiTest
checkstyleMain.shouldRunAfter(compileJava)
test.shouldRunAfter(checkstyleMain, checkstyleAat, checkstyleTest, checkstyleIntegrationTest)
apiTest.shouldRunAfter(test, checkstyleMain, checkstyleAat, checkstyleTest, checkstyleIntegrationTest)

def listFiles(String pattern) {
  return new FileNameFinder()
    .getFileNames("${project.rootDir}", pattern)
    .stream()
    .collect(Collectors.joining(","))
}

sonarqube {
  properties {
    property "sonar.projectName", "CMC :: Claim Store"
    property "sonar.coverage.jacoco.xmlReportPaths", "${project.buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    property "sonar.exclusions", [
        "**/ccd/domain/**",
        "**/cmc/domain/models/**",
        "**/cmc/ccd/sample/data/**",
        "**/cmc/ccd/mapper/**",
        "**/cmc/claimstore/idam/models/**",
        "**/ExceptionForClient.java",
        "**/config/**",
        "**/*Exception.java",
        "**/*Event.java",
        "**/PathPatterns.java",
        "**/ClaimRepository.java",
        "**/CCDCaseRepository.java",
        "**/cmc/claimstore/appinsights/**",
        "**/cmc/claimstore/services/ccd/legaladvisor/**",
        "**/cmc/claimstore/services/ccd/callbacks/ioc/FeesAndPaymentsConfiguration.java",
        "**/cmc/claimstore/courtfinder/models/**",
        "**/ccd/migration/**",
        "**/EmailData.java",
        "**/CCDCaseHandler.java",
        "**/CCDReDetermination.java",
        "**/CCDEventProducer.java",
        "**/GeneratedDocuments.java",
        "**/DBCaseRepository.java",
        "**/MapperUtil.java",
        "**/CCDCaseApi.java",
        "launch-darkly-client/**",
        "email-client/**",
        "rpa-mapper/**"
      ].join(",")
  }
}

bootJar {
  archiveName = 'claim-store.jar'
  manifest {
    attributes 'Implementation-Title': project.name,
      'Implementation-Version': project.version
  }
}

task printVersion {
  description 'Prints the version of this project'
  doLast {
    print project.version
  }
}

wrapper {
  distributionType = Wrapper.DistributionType.ALL
}

bootRun {
  def debug = System.getProperty("debug")
  if (debug == 'true') {
    jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005']
  }
}

task checkStyle(dependsOn: [checkstyleMain, checkstyleAat, checkstyleTest, checkstyleIntegrationTest]){}

idea {
  module {
    testSourceDirs += project.sourceSets.integrationTest.java.srcDirs
    testSourceDirs += project.sourceSets.integrationTest.resources.srcDirs
    testSourceDirs += project.sourceSets.aat.java.srcDirs
    testSourceDirs += project.sourceSets.aat.resources.srcDirs
  }
}
