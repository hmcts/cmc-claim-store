import java.util.stream.Collectors

plugins {
  id 'application'
  id 'checkstyle'
  id 'io.spring.dependency-management' version '1.0.4.RELEASE'
  id 'org.springframework.boot' version '1.5.10.RELEASE'
  id 'org.owasp.dependencycheck' version '3.1.1'
  id 'com.github.ben-manes.versions' version '0.17.0'
  id 'org.sonarqube' version '2.6.2'
  id 'jacoco'
}

dependencyUpdates.resolutionStrategy = {
  componentSelection { rules ->
    rules.all { ComponentSelection selection ->
      boolean rejected = ['alpha', 'beta', 'rc', 'cr', 'm'].any { qualifier ->
        selection.candidate.version ==~ /(?i).*[.-]${qualifier}[.\d-]*/
      }
      if (rejected) {
        selection.reject('Release candidate')
      }
    }
  }
}

allprojects {

  apply plugin: 'application'
  apply plugin: 'checkstyle'
  apply plugin: 'io.spring.dependency-management'
  apply plugin: 'org.springframework.boot'
  apply plugin: 'org.owasp.dependencycheck'
  apply plugin: 'com.github.ben-manes.versions'

  group 'uk.gov.hmcts.cmc'
  version '1.1.0'

  checkstyle {
    maxWarnings = 0

    toolVersion = '8.3'
    // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
    configDir = new File(rootDir, 'config/checkstyle')
  }

  // https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
  dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'dependency-check-suppressions.xml'
    analyzers {
      // Disable scanning of .NET related binaries
      assemblyEnabled = false
    }
  }

  sourceCompatibility = 1.8
  compileJava {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation'
  }

  compileTestJava {
    options.compilerArgs << '-Xlint:deprecation'
  }

  mainClassName = 'uk.gov.hmcts.cmc.claimstore.ClaimStoreApplication'

  repositories {
    maven {
      url "https://dl.bintray.com/hmcts/hmcts-maven"
    }
    jcenter()
    mavenLocal()
  }

}

def springBootVersion = '1.5.10.RELEASE'

dependencyManagement {
  imports {
    mavenBom "org.springframework.boot:spring-boot-starter-parent:${springBootVersion}"
  }
}

def versions = [
  logback          : '1.2.3',
  springBoot       : springBootVersion,
  jackson          : dependencyManagement.importedProperties['jackson.version'],
  springfoxSwagger : '2.8.0',
  reformJavaLogging: '2.1.1'
]

configurations {
  aatCompile.extendsFrom(testCompile)
  aatRuntime.extendsFrom(testRuntime)
  integrationTestCompile.extendsFrom(testCompile)
  integrationTestRuntime.extendsFrom(testRuntime)
}

dependencies {

  compile project(':email-client')
  compile project(':domain-model')
  compile project(':ccd-adapter')
  compile project(':domain-sample-data')
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-web', version: versions.springBoot
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-actuator', version: versions.springBoot
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc', version: versions.springBoot
  compile group: 'org.springframework.boot', name: 'spring-boot-starter-aop', version: versions.springBoot

  compile group: 'org.flywaydb', name: 'flyway-core', version: '4.2.0'

  compile group: 'ch.qos.logback', name: 'logback-classic', version: versions.logback
  compile group: 'ch.qos.logback', name: 'logback-core', version: versions.logback

  compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: versions.jackson
  compile group: 'com.fasterxml.jackson.module', name: 'jackson-module-parameter-names', version: versions.jackson
  compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jdk8', version: versions.jackson
  compile group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: versions.jackson

  compile group: 'com.mitchellbosecke', name: 'pebble', version: '2.4.0'

  compile group: 'cz.jirutka.validator', name: 'validator-collection', version: '2.2.0'

  compile group: 'commons-io', name: 'commons-io', version: '2.6'

  compile group: 'io.springfox', name: 'springfox-swagger2', version: versions.springfoxSwagger
  compile group: 'io.springfox', name: 'springfox-swagger-ui', version: versions.springfoxSwagger

  compile group: 'org.postgresql', name: 'postgresql', version: '42.2.1'

  compile group: 'uk.gov.service.notify', name: 'notifications-java-client', version: '3.8.0-RELEASE'

  compile group: 'uk.gov.hmcts.reform', name: 'java-logging', version: versions.reformJavaLogging
  compile group: 'uk.gov.hmcts.reform', name: 'java-logging-appinsights', version: versions.reformJavaLogging
  compile group: 'uk.gov.hmcts.reform', name: 'http-proxy-spring-boot-autoconfigure', version: '1.1.0'
  compile group: 'uk.gov.hmcts.reform', name: 'pdf-service-client', version: '5.0.0'
  compile group: 'uk.gov.hmcts.reform', name: 'document-management-client', version: '1.1.1'
  compile group: 'uk.gov.hmcts.reform', name: 'service-auth-provider-client', version: '0.4.2'
  compile group: 'uk.gov.hmcts.reform', name: 'core-case-data-store-client', version: '2.5.0'

  compile group: 'uk.gov.hmcts.reform', name: 'send-letter-client', version: '1.0.2'

  compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.7'

  compile group: 'org.jdbi', name: 'jdbi', version: '2.78'

  compile group: 'org.springframework', name: 'spring-context-support', version: '4.3.14.RELEASE'
  compile group: 'org.springframework.retry', name: 'spring-retry', version: '1.2.2.RELEASE'
  compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-feign', version: '1.4.3.RELEASE'

  compile group: 'io.github.openfeign', name: 'feign-httpclient', version: '9.5.1'

  compile group: 'com.microsoft.azure', name: 'applicationinsights-logging-logback', version: '2.0.0-BETA'

  testCompile project(':domain-sample-data')
  testCompile project(path: ":ccd-adapter", configuration: 'testArtifacts')
  testCompile group: 'io.rest-assured', name: 'rest-assured', version: '3.0.7'

  testCompile group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: versions.springBoot
  testCompile group: 'org.springframework.cloud', name: 'spring-cloud-contract-wiremock', version: '1.2.3.RELEASE'
  testCompile group: 'org.assertj', name: 'assertj-core', version: '3.9.0'
  testCompile group: 'org.testcontainers', name: 'postgresql', version: '1.4.3'
  testCompile group: 'org.mockito', name: 'mockito-core', version: '2.15.0'

}

sourceSets {
  integrationTest {
    java {
      compileClasspath += main.output + test.output
      runtimeClasspath += main.output + test.output
      srcDir('src/integrationTest/java')
    }
    resources {
      srcDir('src/integrationTests/resources')
    }
  }

  aat {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output + integrationTest.output
      srcDir('src/aat/java')
    }
    resources {
      srcDir('src/aat/resources')
    }
  }
}

dependencies {
  integrationTestCompile(sourceSets.test.output)
  integrationTestCompile(project(':email-client').sourceSets.main.output)
}

task apiTest(type: Test) {
  group = 'verification'
  description = 'Runs the api tests'
  setTestClassesDirs(sourceSets.integrationTest.output.classesDirs)
  setClasspath(sourceSets.integrationTest.runtimeClasspath)
}

task migrateClaims() {
  description 'Migrating claims from claim-store database to CCD'

  doLast {
    javaexec {
      main = "-jar";
      args = [
        "ccd-claim-migration/build/libs/ccd-claim-migration-1.1.0.jar"
      ]
    }

    print 'Done'
  }
}

task functional(type: Test) {
  group = 'Delivery pipeline'
  description = 'Executes functional tests against an AAT Claim Store instance'
  setTestClassesDirs(sourceSets.aat.output.classesDirs)
  setClasspath(sourceSets.aat.runtimeClasspath)
  include "uk/gov/hmcts/cmc/claimstore/tests/functional/**"

  environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

task smoke(type: Test) {
  group = 'Delivery pipeline'
  description = 'Executes non-destructive smoke tests against a running Claim Store instance'
  setTestClassesDirs(sourceSets.aat.output.classesDirs)
  setClasspath(sourceSets.aat.runtimeClasspath)
  include "uk/gov/hmcts/cmc/claimstore/tests/smoke/**"

  environment("APPINSIGHTS_INSTRUMENTATIONKEY", "test-key")
}

compileIntegrationTestJava {
  options.compilerArgs << '-Xlint:deprecation'
}

jacocoTestReport {
  executionData(test, apiTest)

  reports {
    xml {
      enabled true
    }

    html {
      enabled true
    }
  }
}

project.tasks['sonarqube'].dependsOn test, apiTest
check.dependsOn apiTest
checkstyleMain.shouldRunAfter(compileJava)
test.shouldRunAfter(checkstyleTest)
apiTest.shouldRunAfter(checkstyleIntegrationTest)
apiTest.shouldRunAfter(test)

def listFiles(String pattern) {
  return new FileNameFinder()
    .getFileNames("${project.rootDir}", pattern)
    .stream()
    .collect(Collectors.joining(","))
}

sonarqube {
  properties {
    property "sonar.projectName", "CMC :: Claim Store"
    property "sonar.jacoco.reportPath", "${listFiles('**/test.exec')}"
    property "sonar.jacoco.itReportPath", "${listFiles('**/apiTest.exec')}"
    property "sonar.exclusions", "**/ccd/domain/**," +
      "**/cmc/domain/models/**," +
      "**/cmc/claimstore/idam/models/**," +
      "**/ExceptionForClient.java," +
      "**/config/**," +
      "**/*Exception.java," +
      "**/PathPatterns.java," +
      "**/ClaimRepository.java," +
      "**/ccd/migration/**"
  }
}

jar {
  archiveName = 'claim-store.jar'
  manifest {

    attributes 'Implementation-Title': project.name,
      'Implementation-Version': project.version
  }
}

task printVersion {
  description 'Prints the version of this project'
  doLast {
    print project.version
  }
}

run {
  def debug = System.getProperty("debug")
  if (debug == 'true') {
    jvmArgs = ['-agentlib:jdwp=transport=dt_socket,server=y,suspend=y,address=5005']
  }
}
